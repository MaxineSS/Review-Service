swagger: '2.0'
info:
  description: This is a Review API with a back end system that can support the 5.8M data set for Atelier E-commerse shop.
  version: 1.0.0
  title: Review API
  # put the contact info for your development or API team
  contact:
    email: sejin.maxine@gmail.com
schemes:
  - http
host: 54.90.132.109
basePath: /reviews

securityDefinitions:
  UserSecurity:
   type: oauth2
   authorizationUrl: http://swagger.io/api/oauth/dialog
   flow: implicit
   scopes:
      read:reviews: read reviews to given product id
      read:metadata: read metadata to given product id
security:
  - UserSecurity: []
  
# tags are used for organizing operations
tags:
- name: Reviews
  description: Operations available to all users
- name: Metadata
  description: Operations available to all users
  
paths:
  /:
    get:
      tags:
      - Reviews
      summary: Retrieve reviews
      description: Returns a list of reviews for a particular product. 
                   This list does not include any reported reviews.
      produces:
      - application/json
      parameters:
      - in: query
        name: product_id
        description: Specifies the product for which to retrieve reviews.
        required: true
        type: integer
      - in: query
        name: sort
        description: Changes the sort order of reviews to be based on "newest", "helpful", or "relevant"
        type: string
      - in: query
        name: page
        description: Selects the page of results to return. Default 0.
        type: integer
      - in: query
        name: count
        description: Specifies how many results per page to return. Default 5.
        type: integer
      responses:
        200:
          description: Search results matching product-id
          schema:
            type: array
            items:
              $ref: '#/definitions/Reviews'
        404:
          description: Bad input parameter
    post:
      tags:
      - Reviews
      summary: Add a new review
      description: Adds a review for the given product.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: review
        description: New review object to add
        schema:
          $ref: '#/definitions/NewReview'
      responses:
        201:
          description: Review created
        400:
          description: Invalid input, Object invalid
  /{review_id}/helpful:
    put:
      tags:
      - Reviews
      summary: Update review helpfulness state
      description: Updates a review to show it was found helpful.
      produces:
      - application/json
      parameters:
      - in: path
        type: integer
        description: Required ID of the review to update
        name: review_id
        required: true
      responses:
        200:
         description: Successfully updated helpfulness count incrementing by 1
         schema:
            type: object
            properties:
              status:
                type: string
                example: Updated
        100:
         description: Invalid request
  /{review_id}/report:
    put:
      tags:
      - Reviews
      summary: Update review report state
      description: Updates a review to show it was reported. Note, this action does not delete the review, but the review will not be returned in the above GET request.
      produces:
      - application/json
      parameters:
      - in: path
        type: integer
        description: Required ID of the review to update
        name: review_id
        required: true
      responses:
        200:
         description: Successfully updated report state to true
         schema:
            type: object
            properties:
              status:
                type: string
                example: Reported
        100:
         description: Invalid request
  /meta:
    get:
      tags:
      - Metadata
      summary: Retrieve metadata
      description: Returns review metadata for a given product.
      produces:
      - application/json
      parameters:
      - in: query
        name: product_id
        description: Required ID of the product for which data should be returned
        required: true
        type: integer
      responses:
        200:
          description: Search results matching product-id
          schema:
            $ref: '#/definitions/Meta'
        404:
          description: Bad input parameter
  
definitions:
  Reviews:
    type: object
    properties:
      product:
        type: integer
        example: 59556
      page:
        type: integer
        example: 0
      count:
        type: integer
        example: 5
      results:
        type: array
        items:
          $ref: '#/definitions/Review'
  Review:
    type: object
    properties:
      _id:
        type: string
        example: '61de37530278bfe503a2b276'
      body:
        type: string
        example: 'I really did or did not like this product based on whether it was sustainably sourced.  Then I found out that its made from nothing at all.'
      date:
        type: string
        format: date-time
        example: '2020-07-30T03:41:21.467Z'
      helpfulness:
        type: integer
        example: 8
      photos:
        type: array
        items:
         $ref: '#/definitions/Photo'
      product_id:
        type: integer
        example: 59556 
      rating:
        type: integer
        example: 5
      recommend:
        type: boolean
        example: true
      reported:
        type: boolean
        example: false
      response:
        type: string
        example: Thank you for the great review!
      review_id:
        type: integer
        example: 578413
      reviewer_email:
        type: string
        example: Davion59@gmail.com
      reviewer_name:
        type: string
        example: Alverta
      summary:
        type: string
        example: This product was ok!
  NewReview:
    type: object
    required:
    - product_id
    - name
    - email
    - recommend
    - summary
    - body
    - rating
    - characteristics
    properties:
      product_id:
        type: integer
        example: 59556 
      name:
        type: string
        example: Alverta
      email:
        type: string
        example: Davion59@gmail.com
      recommend:
        type: boolean
        example: true
      summary:
        type: string
        example: This product was ok!
      body:
        type: string
        example: 'I really did or did not like this product based on whether it was sustainably sourced.  Then I found out that its made from nothing at all.'
      rating:
        type: integer
        example: 5
      photos:
        type: array
        items:
          example: "https://ucarecdn.com/f1f74d13-d6fb-410d-881b-abbb552f8c80/OlaSittingontheFloor.svg"
      characteristics: 
        type: object
        example: { "2761908": 2, "2761910": 3, "2761911": 1, "2761909": 4 }
  Photo:
    type: object
    properties:
      url:
        type: string
        example: "https://ucarecdn.com/f1f74d13-d6fb-410d-881b-abbb552f8c80/OlaSittingontheFloor.svg"
  Meta:
    type: object
    properties:
      product_id:
        type: integer
        example: 59556
      ratings:
        type: object
        example: {
        "1": 1,
        "2": 2,
        "4": 1,
        "5": 1
    }
      recommended:
        type: object
        example: {
        "1": 1,
        "2": 2,
        "4": 1,
        "5": 1
    }
      characteristics:
        $ref: '#/definitions/Characteristics'
  Characteristics:
    type: object
    properties:
      fit:
        type: object
        example: { '1': 1, '2': 2, '4': 2, id: 3012685, value: 2.6 }
      Comfort:
        type: object
        example: { '1': 1, '3': 1, '5': 3,' id': 3012687, 'value': 3.8 }
      Quality:
        type: object
        example:  {
            "4": 3,
            "5": 2,
            "id": 3012688,
            "value": 4.4
        }
      Length:
        type: object
        example: {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "id": 3012686,
            "value": 3
        }